import asyncio
from datetime import datetime, timedelta, timezone
import ccxt.async_support as ccxt
import pandas as pd
import telebot
from telebot.storage import StateMemoryStorage

from src.config import (
    TELEGRAM_TOKEN, TELEGRAM_CHAT_ID, TP_PERCENT, SL_PERCENT,
    SYMBOLS, TIMEFRAME, LIMIT, ERROR_THRESHOLD, STATUS_INTERVAL, PING_INTERVAL, MIN_WAIT_SECONDS
)
from src.utils import setup_logging, check_tokens, send_message, send_critical_message, MissingTokenError
from src.strategies import check_signal_ema7_30, check_signal_ema9_20_rsi
from src.handlers import register_handlers, setup_bot_commands

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
logger = setup_logging()

async def get_ohlcv(exchange, symbol, log_candles=False):
    # –ü–æ–ª—É—á–µ–Ω–∏–µ OHLCV-–¥–∞–Ω–Ω—ã—Ö —Å –±–∏—Ä–∂–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∏—Ö –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏
    try:
        data = await asyncio.wait_for(
            exchange.fetch_ohlcv(symbol, timeframe=TIMEFRAME, limit=LIMIT),
            timeout=30.0
        )
        if not data:
            logger.error(f'–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}')
            raise ValueError(f'–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}')
        df = pd.DataFrame(data, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
        # –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π –¥–ª—è –∫–∞–∂–¥–æ–π –ø–∞—Ä—ã, –µ—Å–ª–∏ log_candles=True
        if log_candles:
            logger.info(f'–£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–æ {len(df)} —Å–≤–µ—á–µ–π –¥–ª—è {symbol}')
        if len(df) < LIMIT:
            logger.warning(f'–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}: {len(df)} —Å–≤–µ—á–µ–π')
        if df[['open', 'high', 'low', 'close', 'volume']].isnull().any().any():
            logger.error(f'–î–∞–Ω–Ω—ã–µ –¥–ª—è {symbol} —Å–æ–¥–µ—Ä–∂–∞—Ç –ø—Ä–æ–ø—É—Å–∫–∏ (NaN)')
            raise ValueError(f'–ü—Ä–æ–ø—É—Å–∫–∏ –≤ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}')
        if (df[['open', 'high', 'low', 'close']] <= 0).any().any():
            logger.error(f'–î–∞–Ω–Ω—ã–µ –¥–ª—è {symbol} —Å–æ–¥–µ—Ä–∂–∞—Ç –Ω–µ–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ —Ü–µ–Ω—ã')
            raise ValueError(f'–ù–µ–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ —Ü–µ–Ω—ã –≤ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}')
        last_timestamp = pd.to_datetime(df['timestamp'].iloc[-1], unit='ms', utc=True)
        now = pd.Timestamp.now(timezone.utc)
        time_diff = (now - last_timestamp).total_seconds()
        if time_diff > 7200:
            logger.warning(
                f'–î–∞–Ω–Ω—ã–µ –¥–ª—è {symbol} ({TIMEFRAME}) —É—Å—Ç–∞—Ä–µ–ª–∏: –ø–æ—Å–ª–µ–¥–Ω—è—è —Å–≤–µ—á–∞ {last_timestamp} '
                f'({time_diff/3600:.1f} —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥)'
            )
        return df
    except asyncio.TimeoutError:
        logger.error(f'–¢–∞–π–º-–∞—É—Ç –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ OHLCV –¥–ª—è {symbol}: –ø—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è (30 —Å–µ–∫—É–Ω–¥)')
        raise
    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ—Ç–∏—Ä–æ–≤–æ–∫ –¥–ª—è {symbol}: {e}')
        raise

async def validate_symbols(exchange, symbols):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä –Ω–∞ –±–∏—Ä–∂–µ
    logger.debug("–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä")
    try:
        markets = await exchange.load_markets()
        valid_symbols = [s for s in symbols if s in markets]
        if len(valid_symbols) < len(symbols):
            logger.warning(f'–ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞—Ä—ã: {set(symbols) - set(valid_symbols)}')
        if not valid_symbols:
            raise ValueError('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä')
        logger.debug(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞—Ä—ã: {valid_symbols}")
        return valid_symbols
    except Exception as e:
        logger.critical(f'–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä: {e}')
        raise

def calc_oco_prices(direction, price, tp_perc=TP_PERCENT, sl_perc=SL_PERCENT):
    # –†–∞—Å—á—ë—Ç —Ü–µ–Ω –¥–ª—è OCO-–æ—Ä–¥–µ—Ä–∞ (—Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç –∏ —Å—Ç–æ–ø-–ª–æ—Å—Å)
    if direction.startswith('LONG'):
        tp_price = round(price * (1 + tp_perc/100), 4)
        sl_trigger = round(price * (1 - sl_perc/100), 4)
        sl_market = round(sl_trigger * 0.999, 4)
    else:  # SHORT
        tp_price = round(price * (1 - tp_perc/100), 4)
        sl_trigger = round(price * (1 + sl_perc/100), 4)
        sl_market = round(sl_trigger * 1.001, 4)
    return tp_price, sl_trigger, sl_market

def format_signal_message(symbol, signal_type, price, tp_price, sl_trigger, sl_market, timeframe, rsi_data=None):
    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ç–æ—Ä–≥–æ–≤–æ–º —Å–∏–≥–Ω–∞–ª–µ –¥–ª—è Telegram
    message = f"**üìä {signal_type} –°–∏–≥–Ω–∞–ª –¥–ª—è {symbol}**\n"
    message += f"*–¶–µ–Ω–∞*: `{price:.4f}`\n"
    message += f"*–¢–∞–π–º—Ñ—Ä–µ–π–º*: `{timeframe}`\n"
    if rsi_data:
        prev_rsi, curr_rsi = rsi_data
        message += f"*RSI*: `{prev_rsi:.1f} ‚Üí {curr_rsi:.1f}`\n"
    message += "\n**üìà –ù–∞—Å—Ç—Ä–æ–π–∫–∏ OCO-–æ—Ä–¥–µ—Ä–∞**\n"
    message += f"- *–¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç (–õ–∏–º–∏—Ç)*: `{tp_price:.4f}`\n"
    message += f"- *–°—Ç–æ–ø-–ª–æ—Å—Å (–¢—Ä–∏–≥–≥–µ—Ä)*: `{sl_trigger:.4f}`\n"
    message += f"- *–°—Ç–æ–ø-–ª–æ—Å—Å (–†—ã–Ω–æ—á–Ω–∞—è)*: `{sl_market:.4f}`\n"
    return message

async def main():
    # –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞
    logger.debug("–ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ main()")
    import src.config as config
    check_tokens(config, logger)

    bot = telebot.TeleBot(TELEGRAM_TOKEN, state_storage=StateMemoryStorage())
    register_handlers(bot, config, logger)
    setup_bot_commands(bot)

    exchange = ccxt.bybit({'enableRateLimit': True})
    last_signals_7_30 = {}
    last_signals_9_20_rsi = {}
    error_count = 0
    last_status_time = datetime.now(timezone.utc)
    last_ping_time = datetime.now(timezone.utc)

    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä
        global SYMBOLS
        symbols = await validate_symbols(exchange, SYMBOLS)
        logger.info(f'–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞—Ä—ã: {symbols}')
        send_message(bot, TELEGRAM_CHAT_ID, f'‚úÖ *–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω*: –ü—Ä–æ–≤–µ—Ä–µ–Ω—ã —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã ({len(symbols)})', logger)
    except Exception as e:
        error_msg = f'‚ùå *–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞*: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã: {e}'
        logger.critical(error_msg)
        send_message(bot, TELEGRAM_CHAT_ID, error_msg, logger)
        await exchange.close()
        return

    try:
        # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫ –±–∏—Ä–∂–µ
        test_symbol = symbols[0]
        await get_ohlcv(exchange, test_symbol, log_candles=True)
        logger.info(f'–£—Å–ø–µ—à–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è {test_symbol}')
        send_message(bot, TELEGRAM_CHAT_ID, f'‚úÖ *–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω*: –£—Å–ø–µ—à–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è {test_symbol}', logger)
    except Exception as e:
        error_msg = f'‚ùå *–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞*: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∏—Ä–∂–µ: {e}'
        logger.critical(error_msg)
        send_message(bot, TELEGRAM_CHAT_ID, error_msg, logger)
        await exchange.close()
        return

    logger.info('–ë–æ—Ç —Å–∏–≥–Ω–∞–ª–æ–≤ EMA (–¥–≤–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏) –∑–∞–ø—É—â–µ–Ω.')

    while True:
        try:
            # –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π 15 –º–∏–Ω—É—Ç
            logger.debug("–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä")
            tasks = [get_ohlcv(exchange, symbol, log_candles=True) for symbol in symbols]
            results = await asyncio.gather(*tasks, return_exceptions=True)
            logger.debug("–ó–∞–≤–µ—Ä—à–µ–Ω–æ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—Å–µ—Ö –ø–∞—Ä")

            success_count = 0
            for symbol, result in zip(symbols, results):
                if isinstance(result, Exception):
                    logger.error(f'–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {symbol}: {result}')
                    continue
                success_count += 1
                df = result
                price = df['close'].iloc[-1]

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ EMA7/EMA30
                signal_7_30 = check_signal_ema7_30(df, LIMIT)
                if signal_7_30 and last_signals_7_30.get(symbol) != signal_7_30:
                    tp, sl_tr, sl_mkt = calc_oco_prices(signal_7_30, price)
                    message = format_signal_message(
                        symbol, f"EMA7/30 {signal_7_30}", price, tp, sl_tr, sl_mkt, TIMEFRAME
                    )
                    send_message(bot, TELEGRAM_CHAT_ID, message, logger)
                    logger.info(f'EMA7/30 ‚Äî {symbol}: {signal_7_30} (—Ü–µ–Ω–∞ {price})')
                    last_signals_7_30[symbol] = signal_7_30

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ EMA9/EMA20 + RSI
                signal_9_20_rsi = check_signal_ema9_20_rsi(df, LIMIT)
                if signal_9_20_rsi and last_signals_9_20_rsi.get(symbol) != signal_9_20_rsi:
                    tp, sl_tr, sl_mkt = calc_oco_prices(signal_9_20_rsi, price)
                    message = format_signal_message(
                        symbol, f"EMA9/20+RSI {signal_9_20_rsi}", price, tp, sl_tr, sl_mkt,
                        TIMEFRAME, (df['rsi'].iloc[-2], df['rsi'].iloc[-1])
                    )
                    send_message(bot, TELEGRAM_CHAT_ID, message, logger)
                    logger.info(
                        f'EMA9/20+RSI ‚Äî {symbol}: {signal_9_20_rsi} (—Ü–µ–Ω–∞ {price}) '
                        f'RSI: {df["rsi"].iloc[-2]:.1f}‚Üí{df["rsi"].iloc[-1]:.1f}'
                    )
                    last_signals_9_20_rsi[symbol] = signal_9_20_rsi

            logger.info(f'–£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {success_count}/{len(symbols)} –ø–∞—Ä')

            if success_count > 0:
                error_count = 0

            # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
            now = datetime.now(timezone.utc)
            if (now - last_status_time).total_seconds() >= STATUS_INTERVAL:
                send_message(bot, TELEGRAM_CHAT_ID, f'üîî *–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞*: –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {success_count}/{len(symbols)} –ø–∞—Ä', logger)
                logger.info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞")
                last_status_time = now

            # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –ø–∏–Ω–≥–∞
            if (now - last_ping_time).total_seconds() >= PING_INTERVAL:
                send_message(bot, TELEGRAM_CHAT_ID, 'üîî *–ë–æ—Ç —Å–∏–≥–Ω–∞–ª–æ–≤ EMA*: –†–∞–±–æ—Ç–∞–µ—Ç!', logger)
                logger.info('–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–∏–Ω–≥-—Å–æ–æ–±—â–µ–Ω–∏–µ (6—á)')
                last_ping_time = now

            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤ —Å—Ç–∞—Ä–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
            next_check = now + timedelta(seconds=900)
            wait_seconds = (next_check - now).total_seconds()
            logger.debug(f'–û–∂–∏–¥–∞–Ω–∏–µ {wait_seconds:.1f} —Å–µ–∫—É–Ω–¥ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ {next_check.strftime("%Y-%m-%d %H:%M:%S")}+00:00')

            # –ó–∞–¥–µ—Ä–∂–∫–∞ 15 –º–∏–Ω—É—Ç
            await asyncio.sleep(900)

        except Exception as error:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
            error_count += 1
            logger.error(f'–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ: {error}')
            if error_count >= ERROR_THRESHOLD:
                error_msg = f'‚ùå *–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞*: –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–∑-–∑–∞ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —Å–±–æ–µ–≤: {error}'
                send_message(bot, TELEGRAM_CHAT_ID, error_msg, logger)
                logger.critical('–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–∑-–∑–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ø–æ—Ä–æ–≥–∞ –æ—à–∏–±–æ–∫')
                break

    # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∏—Ä–∂–µ–π
    await exchange.close()
    logger.debug("–ë–∏—Ä–∂–∞ –∑–∞–∫—Ä—ã—Ç–∞")
    