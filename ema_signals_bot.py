import logging
import os
import sys
import asyncio
import threading
from datetime import datetime, timedelta, timezone
import time
import ccxt.async_support as ccxt
import pandas as pd
from dotenv import load_dotenv
import telebot
from telebot.handler_backends import State, StatesGroup
from telebot.storage import StateMemoryStorage
from telebot.types import BotCommand

# ----- –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ì–ò–†–û–í–ê–ù–ò–Ø -----
logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—ã–≤–æ–¥–∞ –ª–æ–≥–æ–≤ –≤ –∫–æ–Ω—Å–æ–ª—å
stream_handler = logging.StreamHandler(sys.stdout)
stream_handler.setLevel(logging.DEBUG)
stream_handler.setFormatter(
    logging.Formatter('%(asctime)s - %(levelname)s - %(message)s - %(name)s')
)
logger.addHandler(stream_handler)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–ø–∏—Å–∏ –ª–æ–≥–æ–≤ –≤ —Ñ–∞–π–ª
file_handler = logging.FileHandler('ema_signals.log', encoding='utf-8')
file_handler.setLevel(logging.DEBUG)
file_handler.setFormatter(
    logging.Formatter('%(asctime)s - %(levelname)s - %(message)s - %(name)s')
)
logger.addHandler(file_handler)

# ----- –ü–ê–†–ê–ú–ï–¢–†–´ –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò -----
load_dotenv()
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')  # –¢–æ–∫–µ–Ω Telegram-–±–æ—Ç–∞
TELEGRAM_CHAT_ID = os.getenv('TELEGRAM_CHAT_ID')  # ID —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π

# –°–ø–∏—Å–æ–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
SYMBOLS = [
    'BTC/USDT', 'ETH/USDT', 'BNB/USDT', 'SOL/USDT',
    'XRP/USDT', 'DOGE/USDT', 'ADA/USDT', 'AVAX/USDT',
    'DOT/USDT', 'TRX/USDT', 'LINK/USDT', 'SHIB/USDT',
    'UNI/USDT', 'XLM/USDT', 'ATOM/USDT', 'ICP/USDT',
    'FIL/USDT', 'APT/USDT', 'NEAR/USDT', 'ARB/USDT',
    'SUI/USDT', 'AAVE/USDT', 'OP/USDT', 'PEPE/USDT',
    'STX/USDT', 'APE/USDT', 'MOCA/USDT', 'POL/USDT',
    'ZK/USDT', 'ONDO/USDT'
]

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–æ—Ä–≥–æ–≤–ª–∏
TIMEFRAME = '1h'  # –¢–∞–π–º—Ñ—Ä–µ–π–º –≥—Ä–∞—Ñ–∏–∫–∞
LIMIT = 150  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
RETRY_PERIOD = 3600  # –ü–µ—Ä–∏–æ–¥ –ø–æ–≤—Ç–æ—Ä–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (1 —á–∞—Å)
ERROR_THRESHOLD = 5  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫ –ø–µ—Ä–µ–¥ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º
STATUS_INTERVAL = 86400  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ (1 –¥–µ–Ω—å, –≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
PING_INTERVAL = 6 * 3600  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø–∏–Ω–≥–∞ (6 —á–∞—Å–æ–≤, –≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
MIN_WAIT_SECONDS = 10  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞ –∏ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (–∫–∞–∫ float —Å –¥–µ—Ñ–æ–ª—Ç–æ–º)
TP_PERCENT = float(os.getenv('TAKE_PROFIT_PERCENT', '2.0'))  # –ü—Ä–æ—Ü–µ–Ω—Ç —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞
SL_PERCENT = float(os.getenv('STOP_LOSS_PERCENT', '1.0'))  # –ü—Ä–æ—Ü–µ–Ω—Ç —Å—Ç–æ–ø-–ª–æ—Å—Å–∞

# ----- –ö–ê–°–¢–û–ú–ù–´–ï –ò–°–ö–õ–Æ–ß–ï–ù–ò–Ø -----
class MissingTokenError(Exception):
    """–ò—Å–∫–ª—é—á–µ–Ω–∏–µ, –≤—ã–∑—ã–≤–∞–µ–º–æ–µ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è."""
    pass

# ----- –ù–ê–°–¢–†–û–ô–ö–ê TELEGRAM-–ë–û–¢–ê –° –£–ü–†–ê–í–õ–ï–ù–ò–ï–ú –°–û–°–¢–û–Ø–ù–ò–Ø–ú–ò -----
class SettingsState(StatesGroup):
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ –≤–≤–æ–¥–∞ –∫–æ–º–∞–Ω–¥ Telegram."""
    waiting_for_tp = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞
    waiting_for_sl = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞

bot = telebot.TeleBot(TELEGRAM_TOKEN, state_storage=StateMemoryStorage())

# ----- –°–ü–ò–°–û–ö –ö–û–ú–ê–ù–î –î–õ–Ø TELEGRAM -----
def setup_bot_commands():
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –≤ Telegram —Å –æ–ø–∏—Å–∞–Ω–∏—è–º–∏."""
    commands = [
        BotCommand("help", "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"),
        BotCommand("set_tp", "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞"),
        BotCommand("set_sl", "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç —Å—Ç–æ–ø-–ª–æ—Å—Å–∞")
    ]
    try:
        bot.set_my_commands(commands)
        logger.info("–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ Telegram")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞: {e}")

# ----- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò -----
def check_tokens():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤—Å–µ—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è."""
    logger.debug("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    required_vars = {
        'TELEGRAM_TOKEN': TELEGRAM_TOKEN,
        'TELEGRAM_CHAT_ID': TELEGRAM_CHAT_ID,
        'TAKE_PROFIT_PERCENT': TP_PERCENT,
        'STOP_LOSS_PERCENT': SL_PERCENT
    }
    missing = [key for key, value in required_vars.items() if not value]
    if missing:
        error_msg = f'–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {", ".join(missing)}'
        logger.critical(error_msg)
        raise MissingTokenError(error_msg)
    try:
        int(TELEGRAM_CHAT_ID)
        logger.debug(f"TELEGRAM_CHAT_ID –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω: {TELEGRAM_CHAT_ID}")
    except ValueError:
        error_msg = 'TELEGRAM_CHAT_ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.'
        logger.critical(error_msg)
        raise MissingTokenError(error_msg)
    try:
        tp = float(TP_PERCENT)
        if tp <= 0:
            raise ValueError("TAKE_PROFIT_PERCENT –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
        logger.debug(f"TAKE_PROFIT_PERCENT –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω: {TP_PERCENT}")
    except ValueError as e:
        error_msg = f'–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç TAKE_PROFIT_PERCENT: {e}'
        logger.critical(error_msg)
        raise MissingTokenError(error_msg)
    try:
        sl = float(SL_PERCENT)
        if sl <= 0:
            raise ValueError("STOP_LOSS_PERCENT –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
        logger.debug(f"STOP_LOSS_PERCENT –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω: {SL_PERCENT}")
    except ValueError as e:
        error_msg = f'–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç STOP_LOSS_PERCENT: {e}'
        logger.critical(error_msg)
        raise MissingTokenError(error_msg)

def calc_oco_prices(direction, price, tp_perc=TP_PERCENT, sl_perc=SL_PERCENT):
    logger.debug(f"–†–∞—Å—á—ë—Ç OCO –¥–ª—è {direction}, —Ü–µ–Ω–∞: {price}, TP%: {tp_perc}, SL%: {sl_perc}")
    if direction.startswith('LONG'):
        tp_price = round(price * (1 + tp_perc/100), 4)
        sl_trigger = round(price * (1 - sl_perc/100), 4)
        sl_market = round(sl_trigger * 0.999, 4)
    else:  # SHORT
        tp_price = round(price * (1 - tp_perc/100), 4)
        sl_trigger = round(price * (1 + sl_perc/100), 4)
        sl_market = round(sl_trigger * 1.001, 4)
    return tp_price, sl_trigger, sl_market

def format_signal_message(symbol, signal_type, price, tp_price, sl_trigger, sl_market, timeframe, rsi_data=None):
    message = f"**üìä {signal_type} –°–∏–≥–Ω–∞–ª –¥–ª—è {symbol}**\n"
    message += f"*–¶–µ–Ω–∞*: `{price:.4f}`\n"
    message += f"*–¢–∞–π–º—Ñ—Ä–µ–π–º*: `{timeframe}`\n"
    if rsi_data:
        prev_rsi, curr_rsi = rsi_data
        message += f"*RSI*: `{prev_rsi:.1f} ‚Üí {curr_rsi:.1f}`\n"
    message += "\n**üìà –ù–∞—Å—Ç—Ä–æ–π–∫–∏ OCO-–æ—Ä–¥–µ—Ä–∞**\n"
    message += f"- *–¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç (–õ–∏–º–∏—Ç)*: `{tp_price:.4f}`\n"
    message += f"- *–°—Ç–æ–ø-–ª–æ—Å—Å (–¢—Ä–∏–≥–≥–µ—Ä)*: `{sl_trigger:.4f}`\n"
    message += f"- *–°—Ç–æ–ø-–ª–æ—Å—Å (–†—ã–Ω–æ—á–Ω–∞—è)*: `{sl_market:.4f}`\n"
    logger.debug(f"–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message}")
    return message

def send_message(message):
    logger.debug(f'–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {message}')
    try:
        bot.send_message(TELEGRAM_CHAT_ID, message, parse_mode='Markdown')
        logger.info('–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram.')
    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {e}')

def send_critical_message(msg):
    logger.debug(f'–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {msg}')
    try:
        if TELEGRAM_TOKEN and TELEGRAM_CHAT_ID:
            bot2 = telebot.TeleBot(TELEGRAM_TOKEN)
            bot2.send_message(TELEGRAM_CHAT_ID, msg, parse_mode='Markdown')
            logger.info('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.')
    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–≤–∞—Ä–∏–π–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}')

async def get_ohlcv(exchange, symbol):
    logger.debug(f'–ü–æ–ª—É—á–µ–Ω–∏–µ OHLCV –¥–ª—è {symbol}')
    try:
        data = await asyncio.wait_for(
            exchange.fetch_ohlcv(symbol, timeframe=TIMEFRAME, limit=LIMIT),
            timeout=30.0  # –¢–∞–π–º-–∞—É—Ç 30 —Å–µ–∫—É–Ω–¥
        )
        if not data:
            logger.error(f'–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}')
            raise ValueError(f'–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}')
        df = pd.DataFrame(data, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
        logger.info(f'–£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–æ {len(df)} —Å–≤–µ—á–µ–π –¥–ª—è {symbol}')
        if len(df) < LIMIT:
            logger.warning(f'–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}: {len(df)} —Å–≤–µ—á–µ–π')
        if df[['open', 'high', 'low', 'close', 'volume']].isnull().any().any():
            logger.error(f'–î–∞–Ω–Ω—ã–µ –¥–ª—è {symbol} —Å–æ–¥–µ—Ä–∂–∞—Ç –ø—Ä–æ–ø—É—Å–∫–∏ (NaN)')
            raise ValueError(f'–ü—Ä–æ–ø—É—Å–∫–∏ –≤ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}')
        if (df[['open', 'high', 'low', 'close']] <= 0).any().any():
            logger.error(f'–î–∞–Ω–Ω—ã–µ –¥–ª—è {symbol} —Å–æ–¥–µ—Ä–∂–∞—Ç –Ω–µ–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ —Ü–µ–Ω—ã')
            raise ValueError(f'–ù–µ–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ —Ü–µ–Ω—ã –≤ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}')
        last_timestamp = pd.to_datetime(df['timestamp'].iloc[-1], unit='ms', utc=True)
        now = pd.Timestamp.now(timezone.utc)
        time_diff = (now - last_timestamp).total_seconds()
        if time_diff > 7200:
            logger.warning(
                f'–î–∞–Ω–Ω—ã–µ –¥–ª—è {symbol} ({TIMEFRAME}) —É—Å—Ç–∞—Ä–µ–ª–∏: –ø–æ—Å–ª–µ–¥–Ω—è—è —Å–≤–µ—á–∞ {last_timestamp} '
                f'({time_diff/3600:.1f} —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥)'
            )
        return df
    except asyncio.TimeoutError:
        logger.error(f'–¢–∞–π–º-–∞—É—Ç –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ OHLCV –¥–ª—è {symbol}: –ø—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è (30 —Å–µ–∫—É–Ω–¥)')
        raise
    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ—Ç–∏—Ä–æ–≤–æ–∫ –¥–ª—è {symbol}: {e}')
        raise

async def validate_symbols(exchange, symbols):
    logger.debug("–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä")
    try:
        markets = await exchange.load_markets()
        valid_symbols = [s for s in symbols if s in markets]
        if len(valid_symbols) < len(symbols):
            logger.warning(f'–ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞—Ä—ã: {set(symbols) - set(valid_symbols)}')
        if not valid_symbols:
            raise ValueError('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä')
        logger.debug(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞—Ä—ã: {valid_symbols}")
        return valid_symbols
    except Exception as e:
        logger.critical(f'–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä: {e}')
        raise

def calc_ema(df, period):
    logger.debug(f"–†–∞—Å—á—ë—Ç EMA —Å –ø–µ—Ä–∏–æ–¥–æ–º {period}")
    if period <= 0:
        raise ValueError('–ü–µ—Ä–∏–æ–¥ EMA –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º')
    return df['close'].ewm(span=period, adjust=False).mean()

def calc_rsi(df, period=14):
    logger.debug(f"–†–∞—Å—á—ë—Ç RSI —Å –ø–µ—Ä–∏–æ–¥–æ–º {period}")
    delta = df['close'].diff()
    up = delta.clip(lower=0)
    down = -delta.clip(upper=0)
    avg_gain = up.rolling(window=period, min_periods=period).mean()
    avg_loss = down.rolling(window=period, min_periods=period).mean()
    rs = avg_gain / avg_loss.where(avg_loss != 0, 1e-10)
    rsi = 100 - (100 / (1 + rs))
    return rsi

def check_signal_ema7_30(df):
    logger.debug("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ EMA7/EMA30")
    if len(df) < LIMIT:
        logger.warning(f'–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è EMA7/EMA30: {len(df)} —Å–≤–µ—á–µ–π')
        return None
    df['ema7'] = calc_ema(df, 7)
    df['ema30'] = calc_ema(df, 30)
    if (
        df['ema7'].iloc[-2] < df['ema30'].iloc[-2] and
        df['ema7'].iloc[-1] > df['ema30'].iloc[-1] and
        df['close'].iloc[-1] > df['ema7'].iloc[-1] and
        df['close'].iloc[-1] > df['ema30'].iloc[-1]
    ):
        logger.info("–û–±–Ω–∞—Ä—É–∂–µ–Ω LONG —Å–∏–≥–Ω–∞–ª –ø–æ EMA7/EMA30")
        return "LONG"
    elif (
        df['ema7'].iloc[-2] > df['ema30'].iloc[-2] and
        df['ema7'].iloc[-1] < df['ema30'].iloc[-1] and
        df['close'].iloc[-1] < df['ema7'].iloc[-1] and
        df['close'].iloc[-1] < df['ema30'].iloc[-1]
    ):
        logger.info("–û–±–Ω–∞—Ä—É–∂–µ–Ω SHORT —Å–∏–≥–Ω–∞–ª –ø–æ EMA7/EMA30")
        return "SHORT"
    return None

def check_signal_ema9_20_rsi(df):
    logger.debug("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ EMA9/EMA20+RSI")
    if len(df) < LIMIT:
        logger.warning(f'–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è EMA9/EMA20+RSI: {len(df)} —Å–≤–µ—á–µ–π')
        return None
    df['ema9'] = calc_ema(df, 9)
    df['ema20'] = calc_ema(df, 20)
    df['rsi'] = calc_rsi(df, 14)
    if pd.isna(df['rsi'].iloc[-1]) or pd.isna(df['rsi'].iloc[-2]):
        logger.warning('RSI —Å–æ–¥–µ—Ä–∂–∏—Ç NaN –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–≤–µ—á–µ–π')
        return None
    if (
        df['ema9'].iloc[-2] < df['ema20'].iloc[-2] and
        df['ema9'].iloc[-1] > df['ema20'].iloc[-1] and
        df['rsi'].iloc[-2] > 55 and
        df['rsi'].iloc[-1] <= 55
    ):
        logger.info("–û–±–Ω–∞—Ä—É–∂–µ–Ω LONG (RSI) —Å–∏–≥–Ω–∞–ª –ø–æ EMA9/EMA20")
        return "LONG (RSI)"
    elif (
        df['ema9'].iloc[-2] > df['ema20'].iloc[-2] and
        df['ema9'].iloc[-1] < df['ema20'].iloc[-1] and
        df['rsi'].iloc[-2] < 45 and
        df['rsi'].iloc[-1] >= 45
    ):
        logger.info("–û–±–Ω–∞—Ä—É–∂–µ–Ω SHORT (RSI) —Å–∏–≥–Ω–∞–ª –ø–æ EMA9/EMA20")
        return "SHORT (RSI)"
    return None

# ----- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î TELEGRAM -----
@bot.message_handler(commands=['help'])
def send_help(message):
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /help –æ—Ç chat_id: {message.chat.id}")
    if str(message.chat.id) != TELEGRAM_CHAT_ID:
        bot.reply_to(message, "–ù–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø.")
        logger.warning(f"–ù–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø: chat_id {message.chat.id} != {TELEGRAM_CHAT_ID}")
        return
    help_text = (
        "**üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞**\n\n"
        "`/help` - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
        "`/set_tp` - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2.5)\n"
        "`/set_sl` - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç —Å—Ç–æ–ø-–ª–æ—Å—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1.0)"
    )
    bot.reply_to(message, help_text, parse_mode='Markdown')
    logger.info("–ö–æ–º–∞–Ω–¥–∞ /help –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞")

@bot.message_handler(commands=['set_tp'])
def set_take_profit(message):
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /set_tp –æ—Ç chat_id: {message.chat.id}")
    if str(message.chat.id) != TELEGRAM_CHAT_ID:
        bot.reply_to(message, "–ù–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø.")
        logger.warning(f"–ù–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø: chat_id {message.chat.id} != {TELEGRAM_CHAT_ID}")
        return
    bot.set_state(message.from_user.id, SettingsState.waiting_for_tp, message.chat.id)
    bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2.5):")
    logger.info("–ó–∞–ø—Ä–æ—à–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞")

@bot.message_handler(state=SettingsState.waiting_for_tp)
def process_tp(message):
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω –≤–≤–æ–¥ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞: {message.text}")
    try:
        new_tp = float(message.text)
        if new_tp <= 0:
            raise ValueError("–¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º")
        global TP_PERCENT
        TP_PERCENT = new_tp
        bot.reply_to(message, f"–¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç –æ–±–Ω–æ–≤–ª–µ–Ω –¥–æ {new_tp}%")
        logger.info(f"–¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç –æ–±–Ω–æ–≤–ª–µ–Ω –¥–æ {new_tp}% —á–µ—Ä–µ–∑ Telegram")
        bot.delete_state(message.from_user.id, message.chat.id)
    except ValueError:
        bot.reply_to(message, "–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2.5).")
        logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞: {message.text}")

@bot.message_handler(commands=['set_sl'])
def set_stop_loss(message):
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /set_sl –æ—Ç chat_id: {message.chat.id}")
    if str(message.chat.id) != TELEGRAM_CHAT_ID:
        bot.reply_to(message, "–ù–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø.")
        logger.warning(f"–ù–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø: chat_id {message.chat.id} != {TELEGRAM_CHAT_ID}")
        return
    bot.set_state(message.from_user.id, SettingsState.waiting_for_sl, message.chat.id)
    bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç —Å—Ç–æ–ø-–ª–æ—Å—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1.0):")
    logger.info("–ó–∞–ø—Ä–æ—à–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞")

@bot.message_handler(state=SettingsState.waiting_for_sl)
def process_sl(message):
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω –≤–≤–æ–¥ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞: {message.text}")
    try:
        new_sl = float(message.text)
        if new_sl <= 0:
            raise ValueError("–°—Ç–æ–ø-–ª–æ—Å—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º")
        global SL_PERCENT
        SL_PERCENT = new_sl
        bot.reply_to(message, f"–°—Ç–æ–ø-–ª–æ—Å—Å –æ–±–Ω–æ–≤–ª–µ–Ω –¥–æ {new_sl}%")
        logger.info(f"–°—Ç–æ–ø-–ª–æ—Å—Å –æ–±–Ω–æ–≤–ª–µ–Ω –¥–æ {new_sl}% —á–µ—Ä–µ–∑ Telegram")
        bot.delete_state(message.from_user.id, message.chat.id)
    except ValueError:
        bot.reply_to(message, "–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1.0).")
        logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞: {message.text}")

async def main():
    logger.debug("–ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ main()")
    check_tokens()
    exchange = ccxt.bybit({'enableRateLimit': True})  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∏—Ä–∂–∏ Bybit
    logger.debug("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –±–∏—Ä–∂–∞ Bybit")
    last_signals_7_30 = {}
    last_signals_9_20_rsi = {}
    error_count = 0
    last_status_time = datetime.now(timezone.utc)
    last_ping_time = datetime.now(timezone.utc)
    setup_bot_commands()

    # –£–±—Ä–∞–Ω–∞ —Å—Ç—Ä–æ–∫–∞ —Å infinity_polling!

    try:
        global SYMBOLS
        SYMBOLS = await validate_symbols(exchange, SYMBOLS)
        logger.info(f'–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞—Ä—ã: {SYMBOLS}')
        send_message(f'‚úÖ *–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω*: –ü—Ä–æ–≤–µ—Ä–µ–Ω—ã —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã ({len(SYMBOLS)})')
    except Exception as e:
        error_msg = f'‚ùå *–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞*: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã: {e}'
        logger.critical(error_msg)
        send_message(error_msg)
        await exchange.close()
        return

    try:
        test_symbol = SYMBOLS[0]
        await get_ohlcv(exchange, test_symbol)
        logger.info(f'–£—Å–ø–µ—à–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è {test_symbol}')
        send_message(f'‚úÖ *–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω*: –£—Å–ø–µ—à–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è {test_symbol}')
    except Exception as e:
        error_msg = f'‚ùå *–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞*: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∏—Ä–∂–µ: {e}'
        logger.critical(error_msg)
        send_message(error_msg)
        await exchange.close()
        return

    logger.info('–ë–æ—Ç —Å–∏–≥–Ω–∞–ª–æ–≤ EMA (–¥–≤–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏) –∑–∞–ø—É—â–µ–Ω.')

    while True:
        try:
            now = datetime.now(timezone.utc)
            next_hour = now.replace(minute=0, second=0, microsecond=0) + timedelta(hours=1)
            wait_seconds = max((next_hour - now).total_seconds(), MIN_WAIT_SECONDS)
            logger.debug(f'–û–∂–∏–¥–∞–Ω–∏–µ {wait_seconds:.1f} —Å–µ–∫—É–Ω–¥ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ {next_hour}')
            await asyncio.sleep(wait_seconds)
            logger.debug("–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä")
            tasks = [get_ohlcv(exchange, symbol) for symbol in SYMBOLS]
            results = await asyncio.gather(*tasks, return_exceptions=True)
            success_count = 0
            for symbol, result in zip(SYMBOLS, results):
                if isinstance(result, Exception):
                    logger.error(f'–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {symbol}: {result}')
                    continue
                success_count += 1
                df = result
                price = df['close'].iloc[-1]
                signal_7_30 = check_signal_ema7_30(df)
                if signal_7_30 and last_signals_7_30.get(symbol) != signal_7_30:
                    tp, sl_tr, sl_mkt = calc_oco_prices(signal_7_30, price)
                    message = format_signal_message(
                        symbol, f"EMA7/30 {signal_7_30}", price, tp, sl_tr, sl_mkt, TIMEFRAME
                    )
                    send_message(message)
                    logger.info(f'EMA7/30 ‚Äî {symbol}: {signal_7_30} (—Ü–µ–Ω–∞ {price})')
                    last_signals_7_30[symbol] = signal_7_30
                signal_9_20_rsi = check_signal_ema9_20_rsi(df)
                if signal_9_20_rsi and last_signals_9_20_rsi.get(symbol) != signal_9_20_rsi:
                    tp, sl_tr, sl_mkt = calc_oco_prices(signal_9_20_rsi, price)
                    message = format_signal_message(
                        symbol, f"EMA9/20+RSI {signal_9_20_rsi}", price, tp, sl_tr, sl_mkt,
                        TIMEFRAME, (df['rsi'].iloc[-2], df['rsi'].iloc[-1])
                    )
                    send_message(message)
                    logger.info(
                        f'EMA9/20+RSI ‚Äî {symbol}: {signal_9_20_rsi} (—Ü–µ–Ω–∞ {price}) '
                        f'RSI: {df["rsi"].iloc[-2]:.1f}‚Üí{df["rsi"].iloc[-1]:.1f}'
                    )
                    last_signals_9_20_rsi[symbol] = signal_9_20_rsi
            logger.info(f'–£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {success_count}/{len(SYMBOLS)} –ø–∞—Ä')
            if success_count > 0:
                error_count = 0
            now = datetime.now(timezone.utc)
            if (now - last_status_time).total_seconds() >= STATUS_INTERVAL:
                send_message(f'üîî *–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞*: –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {success_count}/{len(SYMBOLS)} –ø–∞—Ä')
                logger.info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞")
                last_status_time = now
            if (now - last_ping_time).total_seconds() >= PING_INTERVAL:
                send_message('üîî *–ë–æ—Ç —Å–∏–≥–Ω–∞–ª–æ–≤ EMA*: –†–∞–±–æ—Ç–∞–µ—Ç!')
                logger.info('–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–∏–Ω–≥-—Å–æ–æ–±—â–µ–Ω–∏–µ (6—á)')
                last_ping_time = now
        except Exception as error:
            error_count += 1
            logger.error(f'–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {error}')
            if error_count >= ERROR_THRESHOLD:
                error_msg = f'‚ùå *–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞*: –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–∑-–∑–∞ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —Å–±–æ–µ–≤: {error}'
                send_message(error_msg)
                logger.critical('–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–∑-–∑–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ø–æ—Ä–æ–≥–∞ –æ—à–∏–±–æ–∫')
                break
    await exchange.close()
    logger.debug("–ë–∏—Ä–∂–∞ –∑–∞–∫—Ä—ã—Ç–∞")

# ----- –°–¢–ê–†–¢ TELEGRAM POLLING –í –û–¢–î–ï–õ–¨–ù–û–ú –ü–û–¢–û–ö–ï -----
def run_bot():
    bot.infinity_polling()

if __name__ == '__main__':
    logger.debug("–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã")
    threading.Thread(target=run_bot, daemon=True).start()
    while True:
        try:
            asyncio.run(main())
            break
        except KeyboardInterrupt:
            logger.info('–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é.')
            send_critical_message('‚ö†Ô∏è *–ë–æ—Ç EMA*: –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é (KeyboardInterrupt)')
            break
        except Exception as e:
            err_text = f'‚ùå *–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê* (—Ñ–∞—Ç–∞–ª—å–Ω—ã–π —Å–±–æ–π): {e}'
            logger.critical(err_text, exc_info=True)
            send_critical_message(err_text)
            time.sleep(60)
